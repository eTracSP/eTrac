//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WorkOrderEMS.Data.EntityModel
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class workorderEMSEntities : DbContext
    {
        public workorderEMSEntities()
            : base("name=workorderEMSEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AdminEmployeeMapping> AdminEmployeeMappings { get; set; }
        public virtual DbSet<AdminLocationMapping> AdminLocationMappings { get; set; }
        public virtual DbSet<DARDetail> DARDetails { get; set; }
        public virtual DbSet<EmailLog> EmailLogs { get; set; }
        public virtual DbSet<EMaintenanceSurvey> EMaintenanceSurveys { get; set; }
        public virtual DbSet<EmployeeLocationMapping> EmployeeLocationMappings { get; set; }
        public virtual DbSet<ExceptionLog> ExceptionLogs { get; set; }
        public virtual DbSet<LocationClientMapping> LocationClientMappings { get; set; }
        public virtual DbSet<LocationService> LocationServices { get; set; }
        public virtual DbSet<LoginLog> LoginLogs { get; set; }
        public virtual DbSet<ManagerEmployeeMapping> ManagerEmployeeMappings { get; set; }
        public virtual DbSet<ManagerLocationMapping> ManagerLocationMappings { get; set; }
        public virtual DbSet<MasterCountry> MasterCountries { get; set; }
        public virtual DbSet<MasterState> MasterStates { get; set; }
        public virtual DbSet<PermissionDetail> PermissionDetails { get; set; }
        public virtual DbSet<QRCMasterLog> QRCMasterLogs { get; set; }
        public virtual DbSet<ServiceMaster> ServiceMasters { get; set; }
        public virtual DbSet<TrackEmployeeStatu> TrackEmployeeStatus { get; set; }
        public virtual DbSet<GlobalCode> GlobalCodes { get; set; }
        public virtual DbSet<QRCScanLog> QRCScanLogs { get; set; }
        public virtual DbSet<DashboardWidgetSetting> DashboardWidgetSettings { get; set; }
        public virtual DbSet<TimeZone> TimeZones { get; set; }
        public virtual DbSet<WorkRequestAssignment> WorkRequestAssignments { get; set; }
        public virtual DbSet<eFleetVehicleMasterLog> eFleetVehicleMasterLogs { get; set; }
        public virtual DbSet<eFleetVehicleScanLog> eFleetVehicleScanLogs { get; set; }
        public virtual DbSet<eFleetMeter> eFleetMeters { get; set; }
        public virtual DbSet<eFleetFueling> eFleetFuelings { get; set; }
        public virtual DbSet<eFleetPreventativeMaintenance> eFleetPreventativeMaintenances { get; set; }
        public virtual DbSet<eFleetVehicle> eFleetVehicles { get; set; }
        public virtual DbSet<eFleetDriver> eFleetDrivers { get; set; }
        public virtual DbSet<eFleetMaintenance> eFleetMaintenances { get; set; }
        public virtual DbSet<eFleetVehicleIncident> eFleetVehicleIncidents { get; set; }
        public virtual DbSet<eFleetPassengerTrackingRoute> eFleetPassengerTrackingRoutes { get; set; }
        public virtual DbSet<eFleetPassengerTrackingCount> eFleetPassengerTrackingCounts { get; set; }
        public virtual DbSet<HoursOfService> HoursOfServices { get; set; }
        public virtual DbSet<UserRegistration> UserRegistrations { get; set; }
        public virtual DbSet<AddressMaster> AddressMasters { get; set; }
        public virtual DbSet<LocationMaster> LocationMasters { get; set; }
        public virtual DbSet<QRCMaster> QRCMasters { get; set; }
    
        public virtual ObjectResult<CommonQeriesByVijay_Result> CommonQeriesByVijay()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CommonQeriesByVijay_Result>("CommonQeriesByVijay");
        }
    
        [DbFunction("workorderEMSEntities", "fn_Split")]
        public virtual IQueryable<fn_Split_Result> fn_Split(string sText, string sDelim)
        {
            var sTextParameter = sText != null ?
                new ObjectParameter("sText", sText) :
                new ObjectParameter("sText", typeof(string));
    
            var sDelimParameter = sDelim != null ?
                new ObjectParameter("sDelim", sDelim) :
                new ObjectParameter("sDelim", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_Split_Result>("[workorderEMSEntities].[fn_Split](@sText, @sDelim)", sTextParameter, sDelimParameter);
        }
    
        [DbFunction("workorderEMSEntities", "fnListLocationAdministrator")]
        public virtual IQueryable<fnListLocationAdministrator_Result> fnListLocationAdministrator(Nullable<long> locationId, Nullable<long> userType)
        {
            var locationIdParameter = locationId.HasValue ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(long));
    
            var userTypeParameter = userType.HasValue ?
                new ObjectParameter("UserType", userType) :
                new ObjectParameter("UserType", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnListLocationAdministrator_Result>("[workorderEMSEntities].[fnListLocationAdministrator](@LocationId, @UserType)", locationIdParameter, userTypeParameter);
        }
    
        [DbFunction("workorderEMSEntities", "parseJSON")]
        public virtual IQueryable<parseJSON_Result> parseJSON(string jSON)
        {
            var jSONParameter = jSON != null ?
                new ObjectParameter("JSON", jSON) :
                new ObjectParameter("JSON", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<parseJSON_Result>("[workorderEMSEntities].[parseJSON](@JSON)", jSONParameter);
        }
    
        public virtual ObjectResult<Proc_GetAllWorkAssignedToEmployee_Result> Proc_GetAllWorkAssignedToEmployee(Nullable<long> locationID, Nullable<long> userID, string sortOrderBy, string sortOrderColumn)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(long));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            var sortOrderByParameter = sortOrderBy != null ?
                new ObjectParameter("SortOrderBy", sortOrderBy) :
                new ObjectParameter("SortOrderBy", typeof(string));
    
            var sortOrderColumnParameter = sortOrderColumn != null ?
                new ObjectParameter("SortOrderColumn", sortOrderColumn) :
                new ObjectParameter("SortOrderColumn", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetAllWorkAssignedToEmployee_Result>("Proc_GetAllWorkAssignedToEmployee", locationIDParameter, userIDParameter, sortOrderByParameter, sortOrderColumnParameter);
        }
    
        public virtual ObjectResult<Proc_GetEmployeeTotalWork_Result> Proc_GetEmployeeTotalWork(Nullable<long> userId, Nullable<long> locationId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var locationIdParameter = locationId.HasValue ?
                new ObjectParameter("locationId", locationId) :
                new ObjectParameter("locationId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetEmployeeTotalWork_Result>("Proc_GetEmployeeTotalWork", userIdParameter, locationIdParameter);
        }
    
        public virtual ObjectResult<Proc_GetManagerBasedTotalUser_Result> Proc_GetManagerBasedTotalUser(string userType, Nullable<long> locationID, Nullable<long> userID)
        {
            var userTypeParameter = userType != null ?
                new ObjectParameter("UserType", userType) :
                new ObjectParameter("UserType", typeof(string));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(long));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetManagerBasedTotalUser_Result>("Proc_GetManagerBasedTotalUser", userTypeParameter, locationIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<Proc_GetTotalUser_Result> Proc_GetTotalUser(string userType, Nullable<long> locationID, Nullable<long> userID)
        {
            var userTypeParameter = userType != null ?
                new ObjectParameter("UserType", userType) :
                new ObjectParameter("UserType", typeof(string));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(long));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetTotalUser_Result>("Proc_GetTotalUser", userTypeParameter, locationIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<Proc_GetUserLocations_Result> Proc_GetUserLocations(Nullable<long> userType, Nullable<long> userID)
        {
            var userTypeParameter = userType.HasValue ?
                new ObjectParameter("UserType", userType) :
                new ObjectParameter("UserType", typeof(long));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Proc_GetUserLocations_Result>("Proc_GetUserLocations", userTypeParameter, userIDParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual ObjectResult<sp_DeleteLocation_Result> sp_DeleteLocation(string parameter)
        {
            var parameterParameter = parameter != null ?
                new ObjectParameter("Parameter", parameter) :
                new ObjectParameter("Parameter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_DeleteLocation_Result>("sp_DeleteLocation", parameterParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_GetAllDARDetailsForMobile_Result> sp_GetAllDARDetailsForMobile(Nullable<long> locationID, Nullable<long> userId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> taskType)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(long));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var taskTypeParameter = taskType.HasValue ?
                new ObjectParameter("TaskType", taskType) :
                new ObjectParameter("TaskType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetAllDARDetailsForMobile_Result>("sp_GetAllDARDetailsForMobile", locationIDParameter, userIdParameter, fromDateParameter, toDateParameter, taskTypeParameter);
        }
    
        public virtual ObjectResult<SP_GetAllEmial_Result> SP_GetAllEmial(Nullable<long> emailId, Nullable<long> locationId, Nullable<int> pageIndex, string sortColumnName, string sortOrderBy, Nullable<int> numberOfRows, string textSearch, ObjectParameter totalRecords)
        {
            var emailIdParameter = emailId.HasValue ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(long));
    
            var locationIdParameter = locationId.HasValue ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(long));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var sortColumnNameParameter = sortColumnName != null ?
                new ObjectParameter("SortColumnName", sortColumnName) :
                new ObjectParameter("SortColumnName", typeof(string));
    
            var sortOrderByParameter = sortOrderBy != null ?
                new ObjectParameter("SortOrderBy", sortOrderBy) :
                new ObjectParameter("SortOrderBy", typeof(string));
    
            var numberOfRowsParameter = numberOfRows.HasValue ?
                new ObjectParameter("NumberOfRows", numberOfRows) :
                new ObjectParameter("NumberOfRows", typeof(int));
    
            var textSearchParameter = textSearch != null ?
                new ObjectParameter("TextSearch", textSearch) :
                new ObjectParameter("TextSearch", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetAllEmial_Result>("SP_GetAllEmial", emailIdParameter, locationIdParameter, pageIndexParameter, sortColumnNameParameter, sortOrderByParameter, numberOfRowsParameter, textSearchParameter, totalRecords);
        }
    
        public virtual ObjectResult<SP_GetAllLocation_Result> SP_GetAllLocation(Nullable<long> locationID, string operation, Nullable<int> pageIndex, string sortColumnName, string sortOrderBy, Nullable<int> numberOfRows, string textSearch, ObjectParameter totalRecords)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(long));
    
            var operationParameter = operation != null ?
                new ObjectParameter("Operation", operation) :
                new ObjectParameter("Operation", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var sortColumnNameParameter = sortColumnName != null ?
                new ObjectParameter("SortColumnName", sortColumnName) :
                new ObjectParameter("SortColumnName", typeof(string));
    
            var sortOrderByParameter = sortOrderBy != null ?
                new ObjectParameter("SortOrderBy", sortOrderBy) :
                new ObjectParameter("SortOrderBy", typeof(string));
    
            var numberOfRowsParameter = numberOfRows.HasValue ?
                new ObjectParameter("NumberOfRows", numberOfRows) :
                new ObjectParameter("NumberOfRows", typeof(int));
    
            var textSearchParameter = textSearch != null ?
                new ObjectParameter("TextSearch", textSearch) :
                new ObjectParameter("TextSearch", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetAllLocation_Result>("SP_GetAllLocation", locationIDParameter, operationParameter, pageIndexParameter, sortColumnNameParameter, sortOrderByParameter, numberOfRowsParameter, textSearchParameter, totalRecords);
        }
    
        public virtual ObjectResult<SP_GetAllNotAssignedUsers_Result> SP_GetAllNotAssignedUsers(Nullable<long> requestedBy, Nullable<int> pageIndex, string sortColumnName, string sortOrderBy, Nullable<int> numberOfRows, string textSearch, string userType, ObjectParameter totalRecords)
        {
            var requestedByParameter = requestedBy.HasValue ?
                new ObjectParameter("RequestedBy", requestedBy) :
                new ObjectParameter("RequestedBy", typeof(long));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var sortColumnNameParameter = sortColumnName != null ?
                new ObjectParameter("SortColumnName", sortColumnName) :
                new ObjectParameter("SortColumnName", typeof(string));
    
            var sortOrderByParameter = sortOrderBy != null ?
                new ObjectParameter("SortOrderBy", sortOrderBy) :
                new ObjectParameter("SortOrderBy", typeof(string));
    
            var numberOfRowsParameter = numberOfRows.HasValue ?
                new ObjectParameter("NumberOfRows", numberOfRows) :
                new ObjectParameter("NumberOfRows", typeof(int));
    
            var textSearchParameter = textSearch != null ?
                new ObjectParameter("TextSearch", textSearch) :
                new ObjectParameter("TextSearch", typeof(string));
    
            var userTypeParameter = userType != null ?
                new ObjectParameter("UserType", userType) :
                new ObjectParameter("UserType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetAllNotAssignedUsers_Result>("SP_GetAllNotAssignedUsers", requestedByParameter, pageIndexParameter, sortColumnNameParameter, sortOrderByParameter, numberOfRowsParameter, textSearchParameter, userTypeParameter, totalRecords);
        }
    
        public virtual int SP_GetAllProject(Nullable<long> projectID, string operation, Nullable<int> pageIndex, string sortColumnName, string sortOrderBy, Nullable<int> numberOfRows, string textSearch, ObjectParameter totalRecords)
        {
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(long));
    
            var operationParameter = operation != null ?
                new ObjectParameter("operation", operation) :
                new ObjectParameter("operation", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var sortColumnNameParameter = sortColumnName != null ?
                new ObjectParameter("SortColumnName", sortColumnName) :
                new ObjectParameter("SortColumnName", typeof(string));
    
            var sortOrderByParameter = sortOrderBy != null ?
                new ObjectParameter("SortOrderBy", sortOrderBy) :
                new ObjectParameter("SortOrderBy", typeof(string));
    
            var numberOfRowsParameter = numberOfRows.HasValue ?
                new ObjectParameter("NumberOfRows", numberOfRows) :
                new ObjectParameter("NumberOfRows", typeof(int));
    
            var textSearchParameter = textSearch != null ?
                new ObjectParameter("TextSearch", textSearch) :
                new ObjectParameter("TextSearch", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_GetAllProject", projectIDParameter, operationParameter, pageIndexParameter, sortColumnNameParameter, sortOrderByParameter, numberOfRowsParameter, textSearchParameter, totalRecords);
        }
    
        public virtual ObjectResult<sp_GetAllRoutinecheck_Result> sp_GetAllRoutinecheck(Nullable<long> userId, Nullable<long> locationId, string fromDate, string toDate)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var locationIdParameter = locationId.HasValue ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(long));
    
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetAllRoutinecheck_Result>("sp_GetAllRoutinecheck", userIdParameter, locationIdParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual int SP_GetAllVerifiedManager(Nullable<long> userID, string operation, Nullable<int> pageIndex, string sortColumnName, string sortOrderBy, Nullable<int> numberOfRows, string textSearch, ObjectParameter totalRecords)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            var operationParameter = operation != null ?
                new ObjectParameter("operation", operation) :
                new ObjectParameter("operation", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var sortColumnNameParameter = sortColumnName != null ?
                new ObjectParameter("SortColumnName", sortColumnName) :
                new ObjectParameter("SortColumnName", typeof(string));
    
            var sortOrderByParameter = sortOrderBy != null ?
                new ObjectParameter("SortOrderBy", sortOrderBy) :
                new ObjectParameter("SortOrderBy", typeof(string));
    
            var numberOfRowsParameter = numberOfRows.HasValue ?
                new ObjectParameter("NumberOfRows", numberOfRows) :
                new ObjectParameter("NumberOfRows", typeof(int));
    
            var textSearchParameter = textSearch != null ?
                new ObjectParameter("TextSearch", textSearch) :
                new ObjectParameter("TextSearch", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_GetAllVerifiedManager", userIDParameter, operationParameter, pageIndexParameter, sortColumnNameParameter, sortOrderByParameter, numberOfRowsParameter, textSearchParameter, totalRecords);
        }
    
        public virtual int SP_GetAllVerifiedUser(Nullable<long> userID, string operation, Nullable<int> pageIndex, string sortColumnName, string sortOrderBy, Nullable<int> numberOfRows, string textSearch, ObjectParameter totalRecords)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            var operationParameter = operation != null ?
                new ObjectParameter("operation", operation) :
                new ObjectParameter("operation", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var sortColumnNameParameter = sortColumnName != null ?
                new ObjectParameter("SortColumnName", sortColumnName) :
                new ObjectParameter("SortColumnName", typeof(string));
    
            var sortOrderByParameter = sortOrderBy != null ?
                new ObjectParameter("SortOrderBy", sortOrderBy) :
                new ObjectParameter("SortOrderBy", typeof(string));
    
            var numberOfRowsParameter = numberOfRows.HasValue ?
                new ObjectParameter("NumberOfRows", numberOfRows) :
                new ObjectParameter("NumberOfRows", typeof(int));
    
            var textSearchParameter = textSearch != null ?
                new ObjectParameter("TextSearch", textSearch) :
                new ObjectParameter("TextSearch", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_GetAllVerifiedUser", userIDParameter, operationParameter, pageIndexParameter, sortColumnNameParameter, sortOrderByParameter, numberOfRowsParameter, textSearchParameter, totalRecords);
        }
    
        public virtual ObjectResult<SP_GetAllWorkOrderAssignedToEmployee_Result> SP_GetAllWorkOrderAssignedToEmployee(Nullable<long> locationID, string type, Nullable<long> userID, string filter)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(long));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetAllWorkOrderAssignedToEmployee_Result>("SP_GetAllWorkOrderAssignedToEmployee", locationIDParameter, typeParameter, userIDParameter, filterParameter);
        }
    
        public virtual ObjectResult<SP_GetAllWorkRequestAssignment_Result> SP_GetAllWorkRequestAssignment(Nullable<long> workRequestAssignmentID, Nullable<long> requestedBy, string operation, Nullable<int> pageIndex, string sortColumnName, string sortOrderBy, Nullable<int> numberOfRows, string textSearch, Nullable<long> locationID, Nullable<long> userID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, ObjectParameter totalRecords)
        {
            var workRequestAssignmentIDParameter = workRequestAssignmentID.HasValue ?
                new ObjectParameter("WorkRequestAssignmentID", workRequestAssignmentID) :
                new ObjectParameter("WorkRequestAssignmentID", typeof(long));
    
            var requestedByParameter = requestedBy.HasValue ?
                new ObjectParameter("RequestedBy", requestedBy) :
                new ObjectParameter("RequestedBy", typeof(long));
    
            var operationParameter = operation != null ?
                new ObjectParameter("operation", operation) :
                new ObjectParameter("operation", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var sortColumnNameParameter = sortColumnName != null ?
                new ObjectParameter("SortColumnName", sortColumnName) :
                new ObjectParameter("SortColumnName", typeof(string));
    
            var sortOrderByParameter = sortOrderBy != null ?
                new ObjectParameter("SortOrderBy", sortOrderBy) :
                new ObjectParameter("SortOrderBy", typeof(string));
    
            var numberOfRowsParameter = numberOfRows.HasValue ?
                new ObjectParameter("NumberOfRows", numberOfRows) :
                new ObjectParameter("NumberOfRows", typeof(int));
    
            var textSearchParameter = textSearch != null ?
                new ObjectParameter("TextSearch", textSearch) :
                new ObjectParameter("TextSearch", typeof(string));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(long));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetAllWorkRequestAssignment_Result>("SP_GetAllWorkRequestAssignment", workRequestAssignmentIDParameter, requestedByParameter, operationParameter, pageIndexParameter, sortColumnNameParameter, sortOrderByParameter, numberOfRowsParameter, textSearchParameter, locationIDParameter, userIDParameter, startDateParameter, endDateParameter, totalRecords);
        }
    
        public virtual ObjectResult<SP_GetDARDetails_Result> SP_GetDARDetails(Nullable<long> userId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<long> taskType)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(long));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var taskTypeParameter = taskType.HasValue ?
                new ObjectParameter("taskType", taskType) :
                new ObjectParameter("taskType", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetDARDetails_Result>("SP_GetDARDetails", userIdParameter, fromDateParameter, toDateParameter, taskTypeParameter);
        }
    
        public virtual ObjectResult<SP_GetLocationDetailByLocationID_Result> SP_GetLocationDetailByLocationID(Nullable<long> locationID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetLocationDetailByLocationID_Result>("SP_GetLocationDetailByLocationID", locationIDParameter);
        }
    
        public virtual ObjectResult<SP_GetUser_Result> SP_GetUser(Nullable<long> userID, string operation, Nullable<int> pageIndex, string sortColumnName, string sortOrderBy, Nullable<int> numberOfRows, string textSearch, ObjectParameter totalRecords)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            var operationParameter = operation != null ?
                new ObjectParameter("operation", operation) :
                new ObjectParameter("operation", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var sortColumnNameParameter = sortColumnName != null ?
                new ObjectParameter("SortColumnName", sortColumnName) :
                new ObjectParameter("SortColumnName", typeof(string));
    
            var sortOrderByParameter = sortOrderBy != null ?
                new ObjectParameter("SortOrderBy", sortOrderBy) :
                new ObjectParameter("SortOrderBy", typeof(string));
    
            var numberOfRowsParameter = numberOfRows.HasValue ?
                new ObjectParameter("NumberOfRows", numberOfRows) :
                new ObjectParameter("NumberOfRows", typeof(int));
    
            var textSearchParameter = textSearch != null ?
                new ObjectParameter("TextSearch", textSearch) :
                new ObjectParameter("TextSearch", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetUser_Result>("SP_GetUser", userIDParameter, operationParameter, pageIndexParameter, sortColumnNameParameter, sortOrderByParameter, numberOfRowsParameter, textSearchParameter, totalRecords);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_permissionAssign_Result> sp_permissionAssign(Nullable<long> userId, Nullable<long> userType, Nullable<long> createdBy, Nullable<long> locationId, string action)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(long));
    
            var userTypeParameter = userType.HasValue ?
                new ObjectParameter("userType", userType) :
                new ObjectParameter("userType", typeof(long));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("createdBy", createdBy) :
                new ObjectParameter("createdBy", typeof(long));
    
            var locationIdParameter = locationId.HasValue ?
                new ObjectParameter("locationId", locationId) :
                new ObjectParameter("locationId", typeof(long));
    
            var actionParameter = action != null ?
                new ObjectParameter("action", action) :
                new ObjectParameter("action", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_permissionAssign_Result>("sp_permissionAssign", userIdParameter, userTypeParameter, createdByParameter, locationIdParameter, actionParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<ssp_EmailDetails_Result> ssp_EmailDetails(Nullable<long> locationId, Nullable<long> empId)
        {
            var locationIdParameter = locationId.HasValue ?
                new ObjectParameter("locationId", locationId) :
                new ObjectParameter("locationId", typeof(long));
    
            var empIdParameter = empId.HasValue ?
                new ObjectParameter("empId", empId) :
                new ObjectParameter("empId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ssp_EmailDetails_Result>("ssp_EmailDetails", locationIdParameter, empIdParameter);
        }
    
        public virtual ObjectResult<ssp_GetAllLocation_Result> ssp_GetAllLocation(Nullable<long> locationId, string textSearch, Nullable<int> pageIndex, string sortColumnName, string sortOrderBy, Nullable<int> numberOfRows, ObjectParameter totalRecords)
        {
            var locationIdParameter = locationId.HasValue ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(long));
    
            var textSearchParameter = textSearch != null ?
                new ObjectParameter("TextSearch", textSearch) :
                new ObjectParameter("TextSearch", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var sortColumnNameParameter = sortColumnName != null ?
                new ObjectParameter("SortColumnName", sortColumnName) :
                new ObjectParameter("SortColumnName", typeof(string));
    
            var sortOrderByParameter = sortOrderBy != null ?
                new ObjectParameter("SortOrderBy", sortOrderBy) :
                new ObjectParameter("SortOrderBy", typeof(string));
    
            var numberOfRowsParameter = numberOfRows.HasValue ?
                new ObjectParameter("NumberOfRows", numberOfRows) :
                new ObjectParameter("NumberOfRows", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ssp_GetAllLocation_Result>("ssp_GetAllLocation", locationIdParameter, textSearchParameter, pageIndexParameter, sortColumnNameParameter, sortOrderByParameter, numberOfRowsParameter, totalRecords);
        }
    
        public virtual ObjectResult<ssp_GetAllVerifiedUsers_Result> ssp_GetAllVerifiedUsers(Nullable<long> userID, Nullable<long> locationId, Nullable<long> userType, Nullable<int> pageIndex, string sortColumnName, string sortOrderBy, Nullable<int> numberOfRows, string textSearch, ObjectParameter totalRecords)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            var locationIdParameter = locationId.HasValue ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(long));
    
            var userTypeParameter = userType.HasValue ?
                new ObjectParameter("UserType", userType) :
                new ObjectParameter("UserType", typeof(long));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var sortColumnNameParameter = sortColumnName != null ?
                new ObjectParameter("SortColumnName", sortColumnName) :
                new ObjectParameter("SortColumnName", typeof(string));
    
            var sortOrderByParameter = sortOrderBy != null ?
                new ObjectParameter("SortOrderBy", sortOrderBy) :
                new ObjectParameter("SortOrderBy", typeof(string));
    
            var numberOfRowsParameter = numberOfRows.HasValue ?
                new ObjectParameter("NumberOfRows", numberOfRows) :
                new ObjectParameter("NumberOfRows", typeof(int));
    
            var textSearchParameter = textSearch != null ?
                new ObjectParameter("TextSearch", textSearch) :
                new ObjectParameter("TextSearch", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ssp_GetAllVerifiedUsers_Result>("ssp_GetAllVerifiedUsers", userIDParameter, locationIdParameter, userTypeParameter, pageIndexParameter, sortColumnNameParameter, sortOrderByParameter, numberOfRowsParameter, textSearchParameter, totalRecords);
        }
    
        public virtual ObjectResult<ssp_GetQRCDetails_TEst_Result> ssp_GetQRCDetails_TEst(Nullable<long> qRCID, Nullable<int> pageIndex, string sortColumnName, string sortOrderBy, Nullable<int> numberOfRows, string qRCSearch, Nullable<long> qRCTYPE, Nullable<long> locationId, ObjectParameter totalRecords)
        {
            var qRCIDParameter = qRCID.HasValue ?
                new ObjectParameter("QRCID", qRCID) :
                new ObjectParameter("QRCID", typeof(long));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var sortColumnNameParameter = sortColumnName != null ?
                new ObjectParameter("SortColumnName", sortColumnName) :
                new ObjectParameter("SortColumnName", typeof(string));
    
            var sortOrderByParameter = sortOrderBy != null ?
                new ObjectParameter("SortOrderBy", sortOrderBy) :
                new ObjectParameter("SortOrderBy", typeof(string));
    
            var numberOfRowsParameter = numberOfRows.HasValue ?
                new ObjectParameter("NumberOfRows", numberOfRows) :
                new ObjectParameter("NumberOfRows", typeof(int));
    
            var qRCSearchParameter = qRCSearch != null ?
                new ObjectParameter("QRCSearch", qRCSearch) :
                new ObjectParameter("QRCSearch", typeof(string));
    
            var qRCTYPEParameter = qRCTYPE.HasValue ?
                new ObjectParameter("QRCTYPE", qRCTYPE) :
                new ObjectParameter("QRCTYPE", typeof(long));
    
            var locationIdParameter = locationId.HasValue ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ssp_GetQRCDetails_TEst_Result>("ssp_GetQRCDetails_TEst", qRCIDParameter, pageIndexParameter, sortColumnNameParameter, sortOrderByParameter, numberOfRowsParameter, qRCSearchParameter, qRCTYPEParameter, locationIdParameter, totalRecords);
        }
    
        public virtual ObjectResult<ssp_GetTaskListByClient_Result> ssp_GetTaskListByClient(string serviceAuthKey, Nullable<long> userId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<long> locationId)
        {
            var serviceAuthKeyParameter = serviceAuthKey != null ?
                new ObjectParameter("ServiceAuthKey", serviceAuthKey) :
                new ObjectParameter("ServiceAuthKey", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var locationIdParameter = locationId.HasValue ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ssp_GetTaskListByClient_Result>("ssp_GetTaskListByClient", serviceAuthKeyParameter, userIdParameter, fromDateParameter, toDateParameter, locationIdParameter);
        }
    
        public virtual ObjectResult<ssp_SendEmailForCellPhone_Result> ssp_SendEmailForCellPhone(Nullable<long> qrcId, Nullable<long> userId)
        {
            var qrcIdParameter = qrcId.HasValue ?
                new ObjectParameter("QrcId", qrcId) :
                new ObjectParameter("QrcId", typeof(long));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ssp_SendEmailForCellPhone_Result>("ssp_SendEmailForCellPhone", qrcIdParameter, userIdParameter);
        }
    
        public virtual ObjectResult<ssp_UpdateDarTaskStatus_Result> ssp_UpdateDarTaskStatus(string serviceAuthKey, Nullable<long> userId, Nullable<long> dARId, string description, string endTime, string endTimeImage, Nullable<long> locationId)
        {
            var serviceAuthKeyParameter = serviceAuthKey != null ?
                new ObjectParameter("ServiceAuthKey", serviceAuthKey) :
                new ObjectParameter("ServiceAuthKey", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var dARIdParameter = dARId.HasValue ?
                new ObjectParameter("DARId", dARId) :
                new ObjectParameter("DARId", typeof(long));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var endTimeParameter = endTime != null ?
                new ObjectParameter("EndTime", endTime) :
                new ObjectParameter("EndTime", typeof(string));
    
            var endTimeImageParameter = endTimeImage != null ?
                new ObjectParameter("EndTimeImage", endTimeImage) :
                new ObjectParameter("EndTimeImage", typeof(string));
    
            var locationIdParameter = locationId.HasValue ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ssp_UpdateDarTaskStatus_Result>("ssp_UpdateDarTaskStatus", serviceAuthKeyParameter, userIdParameter, dARIdParameter, descriptionParameter, endTimeParameter, endTimeImageParameter, locationIdParameter);
        }
    
        public virtual ObjectResult<ssp_UpdateWorkRequestStatus_Result> ssp_UpdateWorkRequestStatus(string serviceAuthKey, Nullable<long> userId, Nullable<long> workRequestAssignmentID, Nullable<int> workRequestStatus, Nullable<int> workRequestType, Nullable<long> locationID, string message, string startTime, string endTime, string workStatusDesc)
        {
            var serviceAuthKeyParameter = serviceAuthKey != null ?
                new ObjectParameter("ServiceAuthKey", serviceAuthKey) :
                new ObjectParameter("ServiceAuthKey", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var workRequestAssignmentIDParameter = workRequestAssignmentID.HasValue ?
                new ObjectParameter("WorkRequestAssignmentID", workRequestAssignmentID) :
                new ObjectParameter("WorkRequestAssignmentID", typeof(long));
    
            var workRequestStatusParameter = workRequestStatus.HasValue ?
                new ObjectParameter("WorkRequestStatus", workRequestStatus) :
                new ObjectParameter("WorkRequestStatus", typeof(int));
    
            var workRequestTypeParameter = workRequestType.HasValue ?
                new ObjectParameter("WorkRequestType", workRequestType) :
                new ObjectParameter("WorkRequestType", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(long));
    
            var messageParameter = message != null ?
                new ObjectParameter("Message", message) :
                new ObjectParameter("Message", typeof(string));
    
            var startTimeParameter = startTime != null ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(string));
    
            var endTimeParameter = endTime != null ?
                new ObjectParameter("EndTime", endTime) :
                new ObjectParameter("EndTime", typeof(string));
    
            var workStatusDescParameter = workStatusDesc != null ?
                new ObjectParameter("WorkStatusDesc", workStatusDesc) :
                new ObjectParameter("WorkStatusDesc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ssp_UpdateWorkRequestStatus_Result>("ssp_UpdateWorkRequestStatus", serviceAuthKeyParameter, userIdParameter, workRequestAssignmentIDParameter, workRequestStatusParameter, workRequestTypeParameter, locationIDParameter, messageParameter, startTimeParameter, endTimeParameter, workStatusDescParameter);
        }
    
        public virtual ObjectResult<SP_GetEmployeeByLocation_Result> SP_GetEmployeeByLocation(Nullable<long> locationID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetEmployeeByLocation_Result>("SP_GetEmployeeByLocation", locationIDParameter);
        }
    
        public virtual ObjectResult<sp_GetQrcForExpirationDate_Result> sp_GetQrcForExpirationDate(Nullable<long> locationID, Nullable<int> expirationType)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(long));
    
            var expirationTypeParameter = expirationType.HasValue ?
                new ObjectParameter("ExpirationType", expirationType) :
                new ObjectParameter("ExpirationType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetQrcForExpirationDate_Result>("sp_GetQrcForExpirationDate", locationIDParameter, expirationTypeParameter);
        }
    
        public virtual ObjectResult<SP_GetAllActiveUserForReport_Result> SP_GetAllActiveUserForReport(Nullable<long> requestedBy, Nullable<int> pageIndex, string sortColumnName, string sortOrderBy, Nullable<int> numberOfRows, string textSearch, Nullable<long> locationID, string userType, ObjectParameter totalRecords)
        {
            var requestedByParameter = requestedBy.HasValue ?
                new ObjectParameter("RequestedBy", requestedBy) :
                new ObjectParameter("RequestedBy", typeof(long));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var sortColumnNameParameter = sortColumnName != null ?
                new ObjectParameter("SortColumnName", sortColumnName) :
                new ObjectParameter("SortColumnName", typeof(string));
    
            var sortOrderByParameter = sortOrderBy != null ?
                new ObjectParameter("SortOrderBy", sortOrderBy) :
                new ObjectParameter("SortOrderBy", typeof(string));
    
            var numberOfRowsParameter = numberOfRows.HasValue ?
                new ObjectParameter("NumberOfRows", numberOfRows) :
                new ObjectParameter("NumberOfRows", typeof(int));
    
            var textSearchParameter = textSearch != null ?
                new ObjectParameter("TextSearch", textSearch) :
                new ObjectParameter("TextSearch", typeof(string));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(long));
    
            var userTypeParameter = userType != null ?
                new ObjectParameter("UserType", userType) :
                new ObjectParameter("UserType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetAllActiveUserForReport_Result>("SP_GetAllActiveUserForReport", requestedByParameter, pageIndexParameter, sortColumnNameParameter, sortOrderByParameter, numberOfRowsParameter, textSearchParameter, locationIDParameter, userTypeParameter, totalRecords);
        }
    
        public virtual ObjectResult<sp_GetIdleStatusOfEmployee_Result> sp_GetIdleStatusOfEmployee(Nullable<long> locationId, Nullable<long> userId)
        {
            var locationIdParameter = locationId.HasValue ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(long));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetIdleStatusOfEmployee_Result>("sp_GetIdleStatusOfEmployee", locationIdParameter, userIdParameter);
        }
    
        public virtual ObjectResult<ssp_DeleteUser_Result> ssp_DeleteUser(Nullable<long> userID, Nullable<long> deletedBy)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            var deletedByParameter = deletedBy.HasValue ?
                new ObjectParameter("DeletedBy", deletedBy) :
                new ObjectParameter("DeletedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ssp_DeleteUser_Result>("ssp_DeleteUser", userIDParameter, deletedByParameter);
        }
    
        public virtual ObjectResult<ssp_getManagerWhoHaveGTTracker_Result> ssp_getManagerWhoHaveGTTracker(Nullable<long> locationID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ssp_getManagerWhoHaveGTTracker_Result>("ssp_getManagerWhoHaveGTTracker", locationIDParameter);
        }
    
        public virtual ObjectResult<SP_GetAllActiveUser_Result> SP_GetAllActiveUser(Nullable<long> requestedBy, Nullable<int> pageIndex, string sortColumnName, string sortOrderBy, Nullable<int> numberOfRows, string textSearch, Nullable<long> locationID, string userType, ObjectParameter totalRecords)
        {
            var requestedByParameter = requestedBy.HasValue ?
                new ObjectParameter("RequestedBy", requestedBy) :
                new ObjectParameter("RequestedBy", typeof(long));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var sortColumnNameParameter = sortColumnName != null ?
                new ObjectParameter("SortColumnName", sortColumnName) :
                new ObjectParameter("SortColumnName", typeof(string));
    
            var sortOrderByParameter = sortOrderBy != null ?
                new ObjectParameter("SortOrderBy", sortOrderBy) :
                new ObjectParameter("SortOrderBy", typeof(string));
    
            var numberOfRowsParameter = numberOfRows.HasValue ?
                new ObjectParameter("NumberOfRows", numberOfRows) :
                new ObjectParameter("NumberOfRows", typeof(int));
    
            var textSearchParameter = textSearch != null ?
                new ObjectParameter("TextSearch", textSearch) :
                new ObjectParameter("TextSearch", typeof(string));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(long));
    
            var userTypeParameter = userType != null ?
                new ObjectParameter("UserType", userType) :
                new ObjectParameter("UserType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetAllActiveUser_Result>("SP_GetAllActiveUser", requestedByParameter, pageIndexParameter, sortColumnNameParameter, sortOrderByParameter, numberOfRowsParameter, textSearchParameter, locationIDParameter, userTypeParameter, totalRecords);
        }
    
        public virtual ObjectResult<ssp_SendEmailForBrakeNotFunctional_Result> ssp_SendEmailForBrakeNotFunctional(Nullable<long> brakesWorkOrderId, Nullable<long> locationId)
        {
            var brakesWorkOrderIdParameter = brakesWorkOrderId.HasValue ?
                new ObjectParameter("BrakesWorkOrderId", brakesWorkOrderId) :
                new ObjectParameter("BrakesWorkOrderId", typeof(long));
    
            var locationIdParameter = locationId.HasValue ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ssp_SendEmailForBrakeNotFunctional_Result>("ssp_SendEmailForBrakeNotFunctional", brakesWorkOrderIdParameter, locationIdParameter);
        }
    
        public virtual ObjectResult<sp_GetCountForDashboard_Result> sp_GetCountForDashboard(Nullable<long> userId, Nullable<long> locationId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var locationIdParameter = locationId.HasValue ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetCountForDashboard_Result>("sp_GetCountForDashboard", userIdParameter, locationIdParameter);
        }
    
        public virtual ObjectResult<ssp_GetAllTaskListByEmpID_Result> ssp_GetAllTaskListByEmpID(string serviceAuthKey, Nullable<long> userId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<long> locationId)
        {
            var serviceAuthKeyParameter = serviceAuthKey != null ?
                new ObjectParameter("ServiceAuthKey", serviceAuthKey) :
                new ObjectParameter("ServiceAuthKey", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var locationIdParameter = locationId.HasValue ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ssp_GetAllTaskListByEmpID_Result>("ssp_GetAllTaskListByEmpID", serviceAuthKeyParameter, userIdParameter, fromDateParameter, toDateParameter, locationIdParameter);
        }
    
        public virtual ObjectResult<ssp_TimeZoneInfo_Result> ssp_TimeZoneInfo()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ssp_TimeZoneInfo_Result>("ssp_TimeZoneInfo");
        }
    
        public virtual ObjectResult<SP_GetAllWorkRequestAssignmentByUsertype_Result> SP_GetAllWorkRequestAssignmentByUsertype(Nullable<long> workRequestAssignmentID, Nullable<long> requestedBy, string operation, Nullable<int> pageIndex, string sortColumnName, string sortOrderBy, Nullable<int> numberOfRows, string textSearch, Nullable<long> locationID, Nullable<long> userID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string filter, ObjectParameter totalRecords)
        {
            var workRequestAssignmentIDParameter = workRequestAssignmentID.HasValue ?
                new ObjectParameter("WorkRequestAssignmentID", workRequestAssignmentID) :
                new ObjectParameter("WorkRequestAssignmentID", typeof(long));
    
            var requestedByParameter = requestedBy.HasValue ?
                new ObjectParameter("RequestedBy", requestedBy) :
                new ObjectParameter("RequestedBy", typeof(long));
    
            var operationParameter = operation != null ?
                new ObjectParameter("operation", operation) :
                new ObjectParameter("operation", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var sortColumnNameParameter = sortColumnName != null ?
                new ObjectParameter("SortColumnName", sortColumnName) :
                new ObjectParameter("SortColumnName", typeof(string));
    
            var sortOrderByParameter = sortOrderBy != null ?
                new ObjectParameter("SortOrderBy", sortOrderBy) :
                new ObjectParameter("SortOrderBy", typeof(string));
    
            var numberOfRowsParameter = numberOfRows.HasValue ?
                new ObjectParameter("NumberOfRows", numberOfRows) :
                new ObjectParameter("NumberOfRows", typeof(int));
    
            var textSearchParameter = textSearch != null ?
                new ObjectParameter("TextSearch", textSearch) :
                new ObjectParameter("TextSearch", typeof(string));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(long));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetAllWorkRequestAssignmentByUsertype_Result>("SP_GetAllWorkRequestAssignmentByUsertype", workRequestAssignmentIDParameter, requestedByParameter, operationParameter, pageIndexParameter, sortColumnNameParameter, sortOrderByParameter, numberOfRowsParameter, textSearchParameter, locationIDParameter, userIDParameter, startDateParameter, endDateParameter, filterParameter, totalRecords);
        }
    
        public virtual ObjectResult<SP_GetAllWorkRequestCreatedByClient_Result> SP_GetAllWorkRequestCreatedByClient(Nullable<long> workRequestAssignmentID, Nullable<long> requestedBy, string operation, Nullable<int> pageIndex, string sortColumnName, string sortOrderBy, Nullable<int> numberOfRows, string textSearch, Nullable<long> locationID, Nullable<long> userID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string filter, ObjectParameter totalRecords)
        {
            var workRequestAssignmentIDParameter = workRequestAssignmentID.HasValue ?
                new ObjectParameter("WorkRequestAssignmentID", workRequestAssignmentID) :
                new ObjectParameter("WorkRequestAssignmentID", typeof(long));
    
            var requestedByParameter = requestedBy.HasValue ?
                new ObjectParameter("RequestedBy", requestedBy) :
                new ObjectParameter("RequestedBy", typeof(long));
    
            var operationParameter = operation != null ?
                new ObjectParameter("operation", operation) :
                new ObjectParameter("operation", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var sortColumnNameParameter = sortColumnName != null ?
                new ObjectParameter("SortColumnName", sortColumnName) :
                new ObjectParameter("SortColumnName", typeof(string));
    
            var sortOrderByParameter = sortOrderBy != null ?
                new ObjectParameter("SortOrderBy", sortOrderBy) :
                new ObjectParameter("SortOrderBy", typeof(string));
    
            var numberOfRowsParameter = numberOfRows.HasValue ?
                new ObjectParameter("NumberOfRows", numberOfRows) :
                new ObjectParameter("NumberOfRows", typeof(int));
    
            var textSearchParameter = textSearch != null ?
                new ObjectParameter("TextSearch", textSearch) :
                new ObjectParameter("TextSearch", typeof(string));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(long));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var filterParameter = filter != null ?
                new ObjectParameter("filter", filter) :
                new ObjectParameter("filter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetAllWorkRequestCreatedByClient_Result>("SP_GetAllWorkRequestCreatedByClient", workRequestAssignmentIDParameter, requestedByParameter, operationParameter, pageIndexParameter, sortColumnNameParameter, sortOrderByParameter, numberOfRowsParameter, textSearchParameter, locationIDParameter, userIDParameter, startDateParameter, endDateParameter, filterParameter, totalRecords);
        }
    
        public virtual ObjectResult<SP_GetAllUnVerifiedUsers_Result> SP_GetAllUnVerifiedUsers(Nullable<long> requestedBy, Nullable<int> pageIndex, string sortColumnName, string sortOrderBy, Nullable<int> numberOfRows, string textSearch, Nullable<long> locationID, string userType, ObjectParameter totalRecords)
        {
            var requestedByParameter = requestedBy.HasValue ?
                new ObjectParameter("RequestedBy", requestedBy) :
                new ObjectParameter("RequestedBy", typeof(long));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var sortColumnNameParameter = sortColumnName != null ?
                new ObjectParameter("SortColumnName", sortColumnName) :
                new ObjectParameter("SortColumnName", typeof(string));
    
            var sortOrderByParameter = sortOrderBy != null ?
                new ObjectParameter("SortOrderBy", sortOrderBy) :
                new ObjectParameter("SortOrderBy", typeof(string));
    
            var numberOfRowsParameter = numberOfRows.HasValue ?
                new ObjectParameter("NumberOfRows", numberOfRows) :
                new ObjectParameter("NumberOfRows", typeof(int));
    
            var textSearchParameter = textSearch != null ?
                new ObjectParameter("TextSearch", textSearch) :
                new ObjectParameter("TextSearch", typeof(string));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(long));
    
            var userTypeParameter = userType != null ?
                new ObjectParameter("UserType", userType) :
                new ObjectParameter("UserType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetAllUnVerifiedUsers_Result>("SP_GetAllUnVerifiedUsers", requestedByParameter, pageIndexParameter, sortColumnNameParameter, sortOrderByParameter, numberOfRowsParameter, textSearchParameter, locationIDParameter, userTypeParameter, totalRecords);
        }
    
        public virtual ObjectResult<sp_GetWorkOrderForDashboardDetails_Result> sp_GetWorkOrderForDashboardDetails(Nullable<long> userId, Nullable<long> locationId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<System.DateTime> webDateTime)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var locationIdParameter = locationId.HasValue ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(long));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var webDateTimeParameter = webDateTime.HasValue ?
                new ObjectParameter("WebDateTime", webDateTime) :
                new ObjectParameter("WebDateTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetWorkOrderForDashboardDetails_Result>("sp_GetWorkOrderForDashboardDetails", userIdParameter, locationIdParameter, fromDateParameter, toDateParameter, webDateTimeParameter);
        }
    
        public virtual ObjectResult<SP_GetUnverifiedUser_Result> SP_GetUnverifiedUser(Nullable<long> userID, string operation, Nullable<int> pageIndex, string sortColumnName, string sortOrderBy, Nullable<int> numberOfRows, string textSearch, ObjectParameter totalRecords)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            var operationParameter = operation != null ?
                new ObjectParameter("operation", operation) :
                new ObjectParameter("operation", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var sortColumnNameParameter = sortColumnName != null ?
                new ObjectParameter("SortColumnName", sortColumnName) :
                new ObjectParameter("SortColumnName", typeof(string));
    
            var sortOrderByParameter = sortOrderBy != null ?
                new ObjectParameter("SortOrderBy", sortOrderBy) :
                new ObjectParameter("SortOrderBy", typeof(string));
    
            var numberOfRowsParameter = numberOfRows.HasValue ?
                new ObjectParameter("NumberOfRows", numberOfRows) :
                new ObjectParameter("NumberOfRows", typeof(int));
    
            var textSearchParameter = textSearch != null ?
                new ObjectParameter("TextSearch", textSearch) :
                new ObjectParameter("TextSearch", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetUnverifiedUser_Result>("SP_GetUnverifiedUser", userIDParameter, operationParameter, pageIndexParameter, sortColumnNameParameter, sortOrderByParameter, numberOfRowsParameter, textSearchParameter, totalRecords);
        }
    
        public virtual ObjectResult<ssp_UpdateEscannerQRCTypeXML_Result> ssp_UpdateEscannerQRCTypeXML(string serviceAuthKey, Nullable<long> userId, Nullable<long> qRCID, string toXml, string action, Nullable<bool> checkOutStatus, Nullable<bool> isDamage, string userName)
        {
            var serviceAuthKeyParameter = serviceAuthKey != null ?
                new ObjectParameter("ServiceAuthKey", serviceAuthKey) :
                new ObjectParameter("ServiceAuthKey", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var qRCIDParameter = qRCID.HasValue ?
                new ObjectParameter("QRCID", qRCID) :
                new ObjectParameter("QRCID", typeof(long));
    
            var toXmlParameter = toXml != null ?
                new ObjectParameter("ToXml", toXml) :
                new ObjectParameter("ToXml", typeof(string));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var checkOutStatusParameter = checkOutStatus.HasValue ?
                new ObjectParameter("CheckOutStatus", checkOutStatus) :
                new ObjectParameter("CheckOutStatus", typeof(bool));
    
            var isDamageParameter = isDamage.HasValue ?
                new ObjectParameter("IsDamage", isDamage) :
                new ObjectParameter("IsDamage", typeof(bool));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ssp_UpdateEscannerQRCTypeXML_Result>("ssp_UpdateEscannerQRCTypeXML", serviceAuthKeyParameter, userIdParameter, qRCIDParameter, toXmlParameter, actionParameter, checkOutStatusParameter, isDamageParameter, userNameParameter);
        }
    
        public virtual ObjectResult<ssp_GetQRCDetailsforPrint_Result> ssp_GetQRCDetailsforPrint(Nullable<long> qRCID, string sortColumnName, string sortOrderBy, string qRCSearch, Nullable<long> qRCTYPE, Nullable<long> locationId, Nullable<long> userID)
        {
            var qRCIDParameter = qRCID.HasValue ?
                new ObjectParameter("QRCID", qRCID) :
                new ObjectParameter("QRCID", typeof(long));
    
            var sortColumnNameParameter = sortColumnName != null ?
                new ObjectParameter("SortColumnName", sortColumnName) :
                new ObjectParameter("SortColumnName", typeof(string));
    
            var sortOrderByParameter = sortOrderBy != null ?
                new ObjectParameter("SortOrderBy", sortOrderBy) :
                new ObjectParameter("SortOrderBy", typeof(string));
    
            var qRCSearchParameter = qRCSearch != null ?
                new ObjectParameter("QRCSearch", qRCSearch) :
                new ObjectParameter("QRCSearch", typeof(string));
    
            var qRCTYPEParameter = qRCTYPE.HasValue ?
                new ObjectParameter("QRCTYPE", qRCTYPE) :
                new ObjectParameter("QRCTYPE", typeof(long));
    
            var locationIdParameter = locationId.HasValue ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(long));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ssp_GetQRCDetailsforPrint_Result>("ssp_GetQRCDetailsforPrint", qRCIDParameter, sortColumnNameParameter, sortOrderByParameter, qRCSearchParameter, qRCTYPEParameter, locationIdParameter, userIDParameter);
        }
    
        public virtual ObjectResult<ssp_GetContinuousTaskListByEmpID_Result> ssp_GetContinuousTaskListByEmpID(string serviceAuthKey, Nullable<long> userId, Nullable<long> locationId)
        {
            var serviceAuthKeyParameter = serviceAuthKey != null ?
                new ObjectParameter("ServiceAuthKey", serviceAuthKey) :
                new ObjectParameter("ServiceAuthKey", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var locationIdParameter = locationId.HasValue ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ssp_GetContinuousTaskListByEmpID_Result>("ssp_GetContinuousTaskListByEmpID", serviceAuthKeyParameter, userIdParameter, locationIdParameter);
        }
    
        public virtual ObjectResult<sp_GetAllDARDetails_Result> sp_GetAllDARDetails(Nullable<long> locationID, Nullable<long> userId, Nullable<long> loginUserId, string fromDate, string toDate, Nullable<int> taskType, Nullable<int> pageIndex, string sortColumnName, string sortOrderBy, Nullable<int> numberOfRows, string textSearch, ObjectParameter totalRecords)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(long));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var loginUserIdParameter = loginUserId.HasValue ?
                new ObjectParameter("LoginUserId", loginUserId) :
                new ObjectParameter("LoginUserId", typeof(long));
    
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            var taskTypeParameter = taskType.HasValue ?
                new ObjectParameter("TaskType", taskType) :
                new ObjectParameter("TaskType", typeof(int));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var sortColumnNameParameter = sortColumnName != null ?
                new ObjectParameter("SortColumnName", sortColumnName) :
                new ObjectParameter("SortColumnName", typeof(string));
    
            var sortOrderByParameter = sortOrderBy != null ?
                new ObjectParameter("SortOrderBy", sortOrderBy) :
                new ObjectParameter("SortOrderBy", typeof(string));
    
            var numberOfRowsParameter = numberOfRows.HasValue ?
                new ObjectParameter("NumberOfRows", numberOfRows) :
                new ObjectParameter("NumberOfRows", typeof(int));
    
            var textSearchParameter = textSearch != null ?
                new ObjectParameter("TextSearch", textSearch) :
                new ObjectParameter("TextSearch", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetAllDARDetails_Result>("sp_GetAllDARDetails", locationIDParameter, userIdParameter, loginUserIdParameter, fromDateParameter, toDateParameter, taskTypeParameter, pageIndexParameter, sortColumnNameParameter, sortOrderByParameter, numberOfRowsParameter, textSearchParameter, totalRecords);
        }
    
        public virtual ObjectResult<sp_GetWorkOrderAcceptedAndCompletedForMissedTime_Result> sp_GetWorkOrderAcceptedAndCompletedForMissedTime(Nullable<long> loginUserID, Nullable<long> locationID, string fromDate, string toDate, Nullable<int> workRequestProjectType, Nullable<long> priorityLevel, Nullable<long> userId, string textSearch)
        {
            var loginUserIDParameter = loginUserID.HasValue ?
                new ObjectParameter("LoginUserID", loginUserID) :
                new ObjectParameter("LoginUserID", typeof(long));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(long));
    
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            var workRequestProjectTypeParameter = workRequestProjectType.HasValue ?
                new ObjectParameter("WorkRequestProjectType", workRequestProjectType) :
                new ObjectParameter("WorkRequestProjectType", typeof(int));
    
            var priorityLevelParameter = priorityLevel.HasValue ?
                new ObjectParameter("PriorityLevel", priorityLevel) :
                new ObjectParameter("PriorityLevel", typeof(long));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var textSearchParameter = textSearch != null ?
                new ObjectParameter("TextSearch", textSearch) :
                new ObjectParameter("TextSearch", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetWorkOrderAcceptedAndCompletedForMissedTime_Result>("sp_GetWorkOrderAcceptedAndCompletedForMissedTime", loginUserIDParameter, locationIDParameter, fromDateParameter, toDateParameter, workRequestProjectTypeParameter, priorityLevelParameter, userIdParameter, textSearchParameter);
        }
    
        public virtual ObjectResult<SP_GetAllActiveUserForDAR_Result> SP_GetAllActiveUserForDAR(Nullable<long> requestedBy, Nullable<int> pageIndex, string sortColumnName, string sortOrderBy, Nullable<int> numberOfRows, string textSearch, Nullable<long> locationID, string userType, ObjectParameter totalRecords)
        {
            var requestedByParameter = requestedBy.HasValue ?
                new ObjectParameter("RequestedBy", requestedBy) :
                new ObjectParameter("RequestedBy", typeof(long));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var sortColumnNameParameter = sortColumnName != null ?
                new ObjectParameter("SortColumnName", sortColumnName) :
                new ObjectParameter("SortColumnName", typeof(string));
    
            var sortOrderByParameter = sortOrderBy != null ?
                new ObjectParameter("SortOrderBy", sortOrderBy) :
                new ObjectParameter("SortOrderBy", typeof(string));
    
            var numberOfRowsParameter = numberOfRows.HasValue ?
                new ObjectParameter("NumberOfRows", numberOfRows) :
                new ObjectParameter("NumberOfRows", typeof(int));
    
            var textSearchParameter = textSearch != null ?
                new ObjectParameter("TextSearch", textSearch) :
                new ObjectParameter("TextSearch", typeof(string));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(long));
    
            var userTypeParameter = userType != null ?
                new ObjectParameter("UserType", userType) :
                new ObjectParameter("UserType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetAllActiveUserForDAR_Result>("SP_GetAllActiveUserForDAR", requestedByParameter, pageIndexParameter, sortColumnNameParameter, sortOrderByParameter, numberOfRowsParameter, textSearchParameter, locationIDParameter, userTypeParameter, totalRecords);
        }
    
        public virtual ObjectResult<sp_GetWorkOrderIssuedForLocation_Result> sp_GetWorkOrderIssuedForLocation(Nullable<long> locationID, Nullable<long> userID, Nullable<long> loginUserID, string fromDate, string toDate, string workRequestProjectType, string textSearch)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(long));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            var loginUserIDParameter = loginUserID.HasValue ?
                new ObjectParameter("LoginUserID", loginUserID) :
                new ObjectParameter("LoginUserID", typeof(long));
    
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            var workRequestProjectTypeParameter = workRequestProjectType != null ?
                new ObjectParameter("WorkRequestProjectType", workRequestProjectType) :
                new ObjectParameter("WorkRequestProjectType", typeof(string));
    
            var textSearchParameter = textSearch != null ?
                new ObjectParameter("TextSearch", textSearch) :
                new ObjectParameter("TextSearch", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetWorkOrderIssuedForLocation_Result>("sp_GetWorkOrderIssuedForLocation", locationIDParameter, userIDParameter, loginUserIDParameter, fromDateParameter, toDateParameter, workRequestProjectTypeParameter, textSearchParameter);
        }
    
        public virtual ObjectResult<sp_GetWorkOrderTimeIssuedFixed_Result> sp_GetWorkOrderTimeIssuedFixed(Nullable<long> loginUserID, Nullable<long> locationID, string fromDate, string toDate, Nullable<int> workRequestProjectType, string textSearch)
        {
            var loginUserIDParameter = loginUserID.HasValue ?
                new ObjectParameter("LoginUserID", loginUserID) :
                new ObjectParameter("LoginUserID", typeof(long));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(long));
    
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            var workRequestProjectTypeParameter = workRequestProjectType.HasValue ?
                new ObjectParameter("WorkRequestProjectType", workRequestProjectType) :
                new ObjectParameter("WorkRequestProjectType", typeof(int));
    
            var textSearchParameter = textSearch != null ?
                new ObjectParameter("TextSearch", textSearch) :
                new ObjectParameter("TextSearch", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetWorkOrderTimeIssuedFixed_Result>("sp_GetWorkOrderTimeIssuedFixed", loginUserIDParameter, locationIDParameter, fromDateParameter, toDateParameter, workRequestProjectTypeParameter, textSearchParameter);
        }
    
        public virtual ObjectResult<sp_GetWorkOrderInProgressForLocation_Result> sp_GetWorkOrderInProgressForLocation(Nullable<long> loginUserId, Nullable<long> locationID, string fromDate, string toDate, Nullable<int> workRequestProjectType, Nullable<long> userId, string textSearch)
        {
            var loginUserIdParameter = loginUserId.HasValue ?
                new ObjectParameter("LoginUserId", loginUserId) :
                new ObjectParameter("LoginUserId", typeof(long));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(long));
    
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            var workRequestProjectTypeParameter = workRequestProjectType.HasValue ?
                new ObjectParameter("WorkRequestProjectType", workRequestProjectType) :
                new ObjectParameter("WorkRequestProjectType", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var textSearchParameter = textSearch != null ?
                new ObjectParameter("TextSearch", textSearch) :
                new ObjectParameter("TextSearch", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetWorkOrderInProgressForLocation_Result>("sp_GetWorkOrderInProgressForLocation", loginUserIdParameter, locationIDParameter, fromDateParameter, toDateParameter, workRequestProjectTypeParameter, userIdParameter, textSearchParameter);
        }
    
        public virtual ObjectResult<sp_GetWorkOrderIssuedForAssignedLocationItem_Result> sp_GetWorkOrderIssuedForAssignedLocationItem(Nullable<long> loginUserId, Nullable<long> locationID, string fromDate, string toDate, Nullable<long> qRCID, Nullable<long> reqType, Nullable<int> workRequestProjectType, Nullable<long> safHazard, Nullable<long> priorityLevel, Nullable<long> userId, string textSearch)
        {
            var loginUserIdParameter = loginUserId.HasValue ?
                new ObjectParameter("LoginUserId", loginUserId) :
                new ObjectParameter("LoginUserId", typeof(long));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(long));
    
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            var qRCIDParameter = qRCID.HasValue ?
                new ObjectParameter("QRCID", qRCID) :
                new ObjectParameter("QRCID", typeof(long));
    
            var reqTypeParameter = reqType.HasValue ?
                new ObjectParameter("ReqType", reqType) :
                new ObjectParameter("ReqType", typeof(long));
    
            var workRequestProjectTypeParameter = workRequestProjectType.HasValue ?
                new ObjectParameter("WorkRequestProjectType", workRequestProjectType) :
                new ObjectParameter("WorkRequestProjectType", typeof(int));
    
            var safHazardParameter = safHazard.HasValue ?
                new ObjectParameter("SafHazard", safHazard) :
                new ObjectParameter("SafHazard", typeof(long));
    
            var priorityLevelParameter = priorityLevel.HasValue ?
                new ObjectParameter("PriorityLevel", priorityLevel) :
                new ObjectParameter("PriorityLevel", typeof(long));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var textSearchParameter = textSearch != null ?
                new ObjectParameter("TextSearch", textSearch) :
                new ObjectParameter("TextSearch", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetWorkOrderIssuedForAssignedLocationItem_Result>("sp_GetWorkOrderIssuedForAssignedLocationItem", loginUserIdParameter, locationIDParameter, fromDateParameter, toDateParameter, qRCIDParameter, reqTypeParameter, workRequestProjectTypeParameter, safHazardParameter, priorityLevelParameter, userIdParameter, textSearchParameter);
        }
    
        public virtual ObjectResult<ssp_UpdateEfleetInspectionTypeXML_Result> ssp_UpdateEfleetInspectionTypeXML(string serviceAuthKey, Nullable<long> userId, Nullable<long> vehicleID, string toXml, string action, Nullable<bool> isDamage, string userName)
        {
            var serviceAuthKeyParameter = serviceAuthKey != null ?
                new ObjectParameter("ServiceAuthKey", serviceAuthKey) :
                new ObjectParameter("ServiceAuthKey", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var vehicleIDParameter = vehicleID.HasValue ?
                new ObjectParameter("VehicleID", vehicleID) :
                new ObjectParameter("VehicleID", typeof(long));
    
            var toXmlParameter = toXml != null ?
                new ObjectParameter("ToXml", toXml) :
                new ObjectParameter("ToXml", typeof(string));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var isDamageParameter = isDamage.HasValue ?
                new ObjectParameter("IsDamage", isDamage) :
                new ObjectParameter("IsDamage", typeof(bool));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ssp_UpdateEfleetInspectionTypeXML_Result>("ssp_UpdateEfleetInspectionTypeXML", serviceAuthKeyParameter, userIdParameter, vehicleIDParameter, toXmlParameter, actionParameter, isDamageParameter, userNameParameter);
        }
    
        public virtual int sp_GetWebDashboardDetails(Nullable<long> userId, Nullable<long> locationId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<System.DateTime> webDateTime)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var locationIdParameter = locationId.HasValue ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(long));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var webDateTimeParameter = webDateTime.HasValue ?
                new ObjectParameter("WebDateTime", webDateTime) :
                new ObjectParameter("WebDateTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetWebDashboardDetails", userIdParameter, locationIdParameter, fromDateParameter, toDateParameter, webDateTimeParameter);
        }
    
        public virtual ObjectResult<ssp_GetQRCDetails_Result> ssp_GetQRCDetails(Nullable<long> qRCID, Nullable<int> pageIndex, string sortColumnName, string sortOrderBy, Nullable<int> numberOfRows, string qRCSearch, Nullable<long> qRCTYPE, Nullable<long> locationId, Nullable<long> userID, ObjectParameter totalRecords)
        {
            var qRCIDParameter = qRCID.HasValue ?
                new ObjectParameter("QRCID", qRCID) :
                new ObjectParameter("QRCID", typeof(long));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var sortColumnNameParameter = sortColumnName != null ?
                new ObjectParameter("SortColumnName", sortColumnName) :
                new ObjectParameter("SortColumnName", typeof(string));
    
            var sortOrderByParameter = sortOrderBy != null ?
                new ObjectParameter("SortOrderBy", sortOrderBy) :
                new ObjectParameter("SortOrderBy", typeof(string));
    
            var numberOfRowsParameter = numberOfRows.HasValue ?
                new ObjectParameter("NumberOfRows", numberOfRows) :
                new ObjectParameter("NumberOfRows", typeof(int));
    
            var qRCSearchParameter = qRCSearch != null ?
                new ObjectParameter("QRCSearch", qRCSearch) :
                new ObjectParameter("QRCSearch", typeof(string));
    
            var qRCTYPEParameter = qRCTYPE.HasValue ?
                new ObjectParameter("QRCTYPE", qRCTYPE) :
                new ObjectParameter("QRCTYPE", typeof(long));
    
            var locationIdParameter = locationId.HasValue ?
                new ObjectParameter("LocationId", locationId) :
                new ObjectParameter("LocationId", typeof(long));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ssp_GetQRCDetails_Result>("ssp_GetQRCDetails", qRCIDParameter, pageIndexParameter, sortColumnNameParameter, sortOrderByParameter, numberOfRowsParameter, qRCSearchParameter, qRCTYPEParameter, locationIdParameter, userIDParameter, totalRecords);
        }
    }
}
